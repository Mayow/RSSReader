import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;
import components.xmltree.XMLTree;
import components.xmltree.XMLTree1;

/**
 *
 **
 * Program to convert an XML RSS (version 2.0) feed from a given URL into the
 * corresponding HTML output file.
 *
 * @author Mohamed Mayow
 *
 */
public final class RssReader {

    /**
     * Private constructor so this utility class cannot be instantiated.
     */
    private RssReader() {
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>the channel tag title as the page title</title>
     * </head> <body> <h1>the page title inside a link to the <channel> link<h1>
     * <p>
     * the channel description
     * </p>
     * <table>
     * <tr>
     * <th>Date</th>
     * <th>Source</th>
     * <th>News</th>
     * </tr>
     *
     * @param channel
     *            the channel element XMLTree
     * @param out
     *            the output stream
     * @updates out.content
     * @requires [the root of channel is a <channel> tag] and out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */

    private static void outputHeader(XMLTree channel, SimpleWriter out) {
        assert channel != null : "Violation of: channel is not null";
        assert out != null : "Violation of: out is not null";
        assert channel.isTag() && channel.label().equals("channel") : ""
        + "Violation of: the label root of channel is a <channel> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<html>");
        out.println("<head>");
        int title_index = getChildElement(channel, "title");
        if (title_index >= 0) {
            String title = channel.child(title_index).child(0).label();
            out.println("<title>");
            out.println(title);
            out.println("</title>");

            int link_index = getChildElement(channel, "link");
            if (link_index >= 0) {
                String source = channel.child(link_index).child(0).label();
                out.println("<h1><a href=\"" + source + "\">" + title
                        + "</a></h1>");
                String secondTitle = channel.child(2).child(0).label();
                out.println("<secondTitle>");
                out.println(secondTitle);
                out.println("</secondTitle>");

            } else {
                out.println("<title>");
                out.println(title);
                out.println("</title>");
                out.print("<h1>" + title + " </h1>");

            }
        }
        // closes the head
        out.println("</head>");
        // the body starts from here
        out.println("<body>");

        out.println("<table border=\"1\"> <tr><th>Date</th> <th>Source</th> <th>News</th> </tr>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </table> </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     */

    private static void outputFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.print("</table></body></html>");
    }

    /**
     * Finds the first occurrence of the given tag among the children of the
     * given {@code XMLTree} and return its index; returns -1 if not found.
     *
     * @param xml
     *            the {@code XMLTree} to search
     * @param tag
     *            the tag to look for
     * @return the index of the first child of type tag of the {@code XMLTree}
     *         or -1 if not found
     * @requires [the label of the root of xml is a tag]
     * @ensures <pre>
     * getChildElement =
     *  [the index of the first child of type tag of the {@code XMLTree} or
     *   -1 if not found]
     * </pre>
     */

    private static int getChildElement(XMLTree xml, String tag) {
        assert xml != null : "Violation of: xml is not null";
        assert tag != null : "Violation of: tag is not null";
        assert xml.isTag() : "Violation of: the label root of xml is a tag";

        String s;
        int solution = -1;
        int n = xml.numberOfChildren();
        for (int i = 0; i < n; i++) {
            s = xml.child(i).label();
            if (s.equals(tag)) {
                solution = i;
            }

        }

        return solution;

    }

    /**
     * Processes one news item and outputs one table row. The row contains three
     * elements: the publication date, the source, and the title (or
     * description) of the item.
     *
     * @param item
     *            the news item
     * @param out
     *            the output stream
     * @updates out.content
     * @requires <pre>
     * [the label of the root of item is an <item> tag] and out.is_open
     * </pre>
     * @ensures <pre>
     * out.content = #out.content *
     *   [an HTML table row with publication date, source, and title of news item]
     * </pre>
     */

    private static void processItem(XMLTree item, SimpleWriter out) {
        assert item != null : "Violation of: item is not null";
        assert out != null : "Violation of: out is not null";
        assert item.isTag() && item.label().equals("item") : ""
        + "Violation of: the label root of item is an <item> tag";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("<tr>");

        out.println("<td>");
        int pubDate_index = getChildElement(item, "pubDate");
        if (pubDate_index >= 0) {
            String pubDate = item.child(pubDate_index).child(0).label();
            out.println(pubDate);
        }
        out.println("</td>");

        out.println("<td>");
        int source_index = getChildElement(item, "source");
        if (source_index >= 0) {
            String source = item.child(source_index).attributeValue("url");
            String text = item.child(source_index).child(0).label();
            out.println("<a href=\"" + source + "\">" + text + "</a>");
        } else {
            out.print(" it has no source");
        }
        out.print("</td>");

        out.print("<td>");

        int url_index = getChildElement(item, "link");
        int title_index = getChildElement(item, "title");
        if (title_index >= 0) {
            String title = item.child(title_index).child(0).label();
            if (url_index >= 0) {
                String url = item.child(url_index).child(0).label();
                out.print("<a href=\"" + url + "\">" + title + "</a>");
            } else {
                out.print(title);
            }

        } else {

            int description_index = getChildElement(item, "decription");
            if (description_index >= 0) {
                String description = item.child(description_index).child(0)
                        .label();
                if (url_index >= 0) {
                    String url = item.child(url_index).child(0).label();
                    out.print("<a href=\"" + url + "\">" + description + "</a>");
                } else {
                    out.println(description);
                }
            }
        }
        out.print("<td/>");
        out.print("<tr/>");
    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {

        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();

        out.print("Enter  URL of a RSS 2.0 news feed: ");
        String urlFile = in.nextLine();
        out.print("Enter output file ");
        String filename = in.nextLine();

        SimpleWriter outputFile = new SimpleWriter1L(filename + ".html");

        XMLTree xml = new XMLTree1(urlFile);
        XMLTree channel = xml.child(0);

        outputHeader(channel, outputFile);

        for (int n = 0; n < channel.numberOfChildren(); n++) {

            if (channel.child(n).label().equals("item")) {

                processItem(channel.child(n), outputFile);
            }
        }

        // prints out the output file
        outputFooter(outputFile);
        out.print("Done");

        // closing
        in.close();
        out.close();
    }

}
